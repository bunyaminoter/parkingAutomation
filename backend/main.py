from fastapi import FastAPI, Form, UploadFile, File, Depends, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from sqlalchemy import text
from datetime import datetime
import shutil
import os
from backend.services.plate_recognition import recognize_plate_from_bytes
from backend.database import SessionLocal, engine
from backend import models

# --------------------------------------------------
# ğŸ”¹ VeritabanÄ± tablolarÄ± migrasyon ile oluÅŸturulur
# --------------------------------------------------
# models.Base.metadata.create_all(bind=engine)  # Migrasyon kullanÄ±yoruz

# --------------------------------------------------
# ğŸ”¹ Uygulama nesnesi oluÅŸtur
# --------------------------------------------------
app = FastAPI(title="Parking Automation API", version="1.0.0")

# --------------------------------------------------
# ğŸ”¹ CORS ayarlarÄ± (React eriÅŸimi iÃ§in)
# --------------------------------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:3000" , "http://localhost:8000"
 ,"http://127.0.0.1:5173", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --------------------------------------------------
# ğŸ”¹ DB session baÄŸÄ±mlÄ±lÄ±ÄŸÄ±
# --------------------------------------------------
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --------------------------------------------------
# ğŸ”¹ Health check endpoint
# --------------------------------------------------
@app.get("/api/health")
def health_check(db: Session = Depends(get_db)):
    """VeritabanÄ± baÄŸlantÄ±sÄ±nÄ± test eder"""
    try:
        db.execute(text("SELECT 1"))
        return {"status": "healthy", "database": "connected"}
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Database connection failed: {str(e)}")

# --------------------------------------------------
# ğŸ”¹ Manuel plaka giriÅŸi (sadece plaka)
# --------------------------------------------------
@app.post("/api/manual_entry")
def manual_entry(
    plate_number: str = Form(...),
    db: Session = Depends(get_db)
):
    # Park kaydÄ± oluÅŸtur (sadece plaka ile)
    record = models.ParkingRecord(
        plate_number=plate_number, 
        entry_time=datetime.utcnow()
    )
    db.add(record)
    db.commit()
    db.refresh(record)

    return {
        "id": record.id,
        "plate_number": record.plate_number,
        "entry_time": record.entry_time,
        "exit_time": record.exit_time,
        "fee": record.fee
    }

# --------------------------------------------------
# ğŸ”¹ Plaka tanÄ±ma iÃ§in resim yÃ¼kleme
# --------------------------------------------------
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

@app.post("/api/upload/image")
def upload_image(file: UploadFile = File(...), db: Session = Depends(get_db)):
    # 1) Dosya iÃ§eriÄŸini oku (tek sefer okunmalÄ±)
    try:
        content = file.file.read()
        if not content:
            raise HTTPException(status_code=400, detail="BoÅŸ dosya gÃ¶nderildi")
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Dosya okunamadÄ±: {str(e)}")

    # 2) Plaka tanÄ±maya gÃ¶nder
    plate, conf = recognize_plate_from_bytes(content, lang_list=["tr","en"], gpu=False)

    if not plate:
        raise HTTPException(status_code=400, detail="Plaka tanÄ±namadÄ±")

    # 3) Park kaydÄ± oluÅŸtur (Car tablosu yoksa doÄŸrudan parking_records iÃ§ine plate yaz)
    try:
        record = models.ParkingRecord(
            plate_number=plate,
            entry_time=datetime.utcnow()
        )
        db.add(record)
        db.commit()
        db.refresh(record)
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"VeritabanÄ± hatasÄ±: {str(e)}")

    # 4) Opsiyonel: yÃ¼klenen dosyayÄ± diske kaydet (isteÄŸe baÄŸlÄ±)
    try:
        import os
        os.makedirs(UPLOAD_DIR, exist_ok=True)
        safe_name = f"{datetime.utcnow().strftime('%Y%m%d%H%M%S')}_{file.filename}"
        path = os.path.join(UPLOAD_DIR, safe_name)
        with open(path, "wb") as f:
            f.write(content)
    except Exception:
        # kaydetme baÅŸarÄ±sÄ±zsa hata verme; sadece loglanabilir
        pass

    return {
        "id": record.id,
        "plate_number": record.plate_number,
        "entry_time": record.entry_time,
        "exit_time": record.exit_time,
        "fee": record.fee,
        "confidence": conf
    }

# --------------------------------------------------
# ğŸ”¹ Plaka tanÄ±ma iÃ§in video yÃ¼kleme
# --------------------------------------------------
@app.post("/api/upload/video")
def upload_video(file: UploadFile = File(...), db: Session = Depends(get_db)):
    try:
        # Plaka tanÄ±ma servisini kullan
        from backend.services.plate_recognition import recognize_plate_from_video
        content = file.file.read()
        plate_number = recognize_plate_from_video(content)
        
        if not plate_number:
            raise HTTPException(status_code=400, detail="Plaka tanÄ±namadÄ±")
        
        # Park kaydÄ± oluÅŸtur
        record = models.ParkingRecord(
            plate_number=plate_number,
            entry_time=datetime.utcnow()
        )
        db.add(record)
        db.commit()
        db.refresh(record)
        
        return {
            "id": record.id,
            "plate_number": record.plate_number,
            "entry_time": record.entry_time,
            "exit_time": record.exit_time,
            "fee": record.fee
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Video iÅŸleme hatasÄ±: {str(e)}")

# --------------------------------------------------
# ğŸ”¹ TÃ¼m park kayÄ±tlarÄ±nÄ± listeleme
# --------------------------------------------------
@app.get("/api/parking_records")
def get_parking_records(db: Session = Depends(get_db)):
    records = db.query(models.ParkingRecord).order_by(models.ParkingRecord.entry_time.desc()).all()
    results = []
    for r in records:
        results.append({
            "id": r.id,
            "plate_number": r.plate_number,
            "entry_time": r.entry_time,
            "exit_time": r.exit_time,
            "fee": r.fee
        })
    return results

# --------------------------------------------------
# ğŸ”¹ Ã‡Ä±kÄ±ÅŸ iÅŸlemi (park kaydÄ±nÄ± tamamlama)
# --------------------------------------------------
@app.put("/api/parking_records/{record_id}/exit")
def complete_parking_record(
    record_id: int, 
    fee: float = 0.0,
    db: Session = Depends(get_db)
):
    record = db.query(models.ParkingRecord).filter(models.ParkingRecord.id == record_id).first()
    if not record:
        raise HTTPException(status_code=404, detail="Park kaydÄ± bulunamadÄ±")
    
    if record.exit_time:
        raise HTTPException(status_code=400, detail="Bu kayÄ±t zaten tamamlanmÄ±ÅŸ")
    
    record.exit_time = datetime.utcnow()
    record.fee = fee
    db.commit()
    db.refresh(record)
    
    return {
        "id": record.id,
        "plate_number": record.plate_number,
        "entry_time": record.entry_time,
        "exit_time": record.exit_time,
        "fee": record.fee
    }

# --------------------------------------------------
# ğŸ”¹ Tekil park kaydÄ± getirme
# --------------------------------------------------
@app.get("/api/parking_records/{record_id}")
def get_parking_record(record_id: int, db: Session = Depends(get_db)):
    record = db.query(models.ParkingRecord).filter(models.ParkingRecord.id == record_id).first()
    if not record:
        raise HTTPException(status_code=404, detail="Park kaydÄ± bulunamadÄ±")
    
    return {
        "id": record.id,
        "plate_number": record.plate_number,
        "entry_time": record.entry_time,
        "exit_time": record.exit_time,
        "fee": record.fee
    }

# --------------------------------------------------
# ğŸ”¹ Frontend dosyalarÄ±nÄ± sun (React build sonrasÄ±)
# --------------------------------------------------
app.mount("/frontend", StaticFiles(directory="frontend", html=True), name="frontend")

@app.get("/", response_class=HTMLResponse)
def root_index():
    return "<html><head><meta http-equiv='refresh' content='0; url=/frontend/index.html' /></head><body></body></html>"
